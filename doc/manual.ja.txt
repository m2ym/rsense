Title: RSense - ユーザーマニュアル
Numbering: yes
CSS: style.css

RSense ユーザーマニュアル
=========================

[Index](index.txt)

\[[English](manual.txt)]

* * *

{toc}

* * *

はじめに
--------

### RSenseとは？ ###

RSenseはJavaで書かれた[Ruby][]のための開発補助ツールです。[UNIXの思想][UNIX philosophy]に従うことで、RSenseはどこからでも簡単に使えるようになっています。EmacsやVimなどのエディタからも利用できます。RSenseは透明性を保つことで簡単に学習・拡張・修正できるよう設計されています。

### 特徴 ###

現在利用可能な機能は以下のようになっています。

* コード補完（メソッド名補完など）
* 型検査

将来は以下の機能も利用可能になる予定です。

* 静的コードチェック
* 定義元ジャンプ
* 呼び出し元ジャンプ
* リファクタリング

インストール
------------

### 必要条件 ###

* Ruby 1.8.x
* JRE 1.5 or ater
  * SunJDK or OpenJDK
* エディタ

  * Emacs
  * Vim

### Rubyのインストール ###

[Ruby][]インタプリタをインストールする必要があります。

UNIX系システムを使ってる場合、パッケージマネージャを使ってインストールしてください。例えばDebian GNU/Linuxでは次のようにインストールします。

    apt-get install ruby

Windowsではインストーラを使ってインストールするのがよいでしょう。インストーラは[Rubyのダウンロードページ](http://www.ruby-lang.org/en/downloads/)から見つかります。RSenseは[Rumix](http://ruby.morphball.net/rumix/)を使ってテストしています。

Rubyインタプリタを起動できるよう`PATH`環境変数を変更することを忘れないでください。大抵の場合はインストーラがやってくれます。

インストール後はコマンドプロンプトからRubyインタプリタが起動できることを確認してください。

    > ruby -v
    ruby 1.8.7 (2009-12-24 patchlevel 248) [i386-mswin32]

### JREのインストール ###

Java Runtime Environment 1.5あるいはそれ以降のバージョンをインストールする必要がありあす。[SunJDK](http://java.sun.com/javase/downloads/index.jsp)と[OpenJDK](http://openjdk.java.net/)をサポートしています。例えばDebian GNU/Linuxでは次のようにインストールします。

    $ apt-get install openjdk-6-jdk # or openjdk-6-jre

### RSenseのインストール ###

基本的にはパッケージディレクトリをどこかのディレクトリにコピーするだけでインストールできます。

#### UNIX系システム ####

パッケージディレクトリをどこかのディレクトリにコピーしてください。大抵は`~/opt`や`/opt`あるいは`/usr/lib`になるでしょう。

    $ cp -av rsense-0.1 ~/opt

本節以降は`RSENSE_HOME`環境変数をインストールしたディレクトリに読みかえてください。

    $ echo $RSENSE_HOME
    /home/tomo/opt/rsense-0.1

インストール後はサーバー/クライアントモデルの複雑さを隠蔽する`bin/rsense`スクリプトが実行できることを確認してください。

    $ cd $RSENSE_HOME
    $ chmod +x bin/rsense
    $ bin/rsense version
    RSense 0.1

最後に`~/.rsense`という名前の設定ファイルを作成します。RSenseはこの設定ファイルを読み込み、`load-path`や`gem-path`といった変数を取得します。`etc/config.rb`スクリプトはRubyのランタイムから適切な`load-path`と`gem-path`を取得して、この設定ファイルを作ってくれます。

    $ ruby etc/config.rb > ~/.rsense
    $ cat ~/.rsense
    home = /home/tomo/opt/rsense-0.1
    load-path = /usr/local/lib/site_ruby/1.8:/usr/local/lib/site_ruby/1.8/x86_64-linux:/usr/local/lib/site_ruby:/usr/lib/ruby/vendor_ruby/1.8:/usr/lib/ruby/vendor_ruby/1.8/x86_64-linux:/usr/lib/ruby/vendor_ruby:/usr/lib/ruby/1.8:/usr/lib/ruby/1.8/x86_64-linux:.
    gem-path = /home/tomo/.gem/ruby/1.8:/usr/lib/ruby/gems/1.8

#### Windows ####

パッケージディレクトリをどこかのディレクトリにコピーしてください。大抵の場合は`C:\\`あるいは`C:\\Program Files`になるでしょう。本節以降は`RSENSE_HOME`環境変数をインストールしたディレクトリに読みかえてください。

    > echo %RSENSE_HOME%
    C:\rsense-0.1

インストール後はサーバー/クライアントモデルの複雑さを隠蔽する`bin\rsense`スクリプトが実行できることを確認してください。UNIX系システムと違って、Windowsは`fork(2)`や`setsid(2)`を持たないので、`bin\rsense`は自動的にサービスプログラムを起動することができません。そのため**クライアントを実行するまえにサーバーを起動しておく必要があります**。

    > cd %RSENSE_HOME%
    > ruby bin\rsense server

サーバーはデフォルトでTCP/77367をリッスンします。次に別のコマンドプロンプトからクライアントを実行します。

    > cd %RSENSE_HOME%
    > ruby bin\rsense version
    RSense 0.1

最後に`%HOME%\\.rsense`という名前の設定ファイルを作成します。RSenseはこの設定ファイルを読み込み、`load-path`や`gem-path`といった変数を取得します。`HOME`環境変数の値は次のコマンドで見ることができます。

    > echo %HOME%
    %HOME%
    > ruby -e "puts ENV['HOME']"
    C:/Documents And Settings/tomo
    > set HOME=C:\Documents And Settings\tomo

`etc/config.rb`スクリプトはRubyのランタイムから適切な`load-path`と`gem-path`を取得して、この設定ファイルを作ってくれます。

    > ruby etc\config.rb > %HOME%\.rsense
    > type %HOME%\.rsense
    home = C:/rsense
    load-path = C:/rumix/ruby/lib/ruby/site_ruby/1.8;C:/rumix/ruby/lib/ruby/site_ruby/1.8/i386-msvcrt;C:/rumix/ruby/lib/ruby/site_ruby;C:/rumix/ruby/lib/ruby/vendor_ruby/1.8;C:/rumix/ruby/lib/ruby/vendor_ruby/1.8/i386-msvcrt;C:/rumix/ruby/lib/ruby/vendor_ruby;C:/rumix/ruby/lib/ruby/1.8;C:/rumix/ruby/lib/ruby/1.8/i386-mswin32;.
    gem-path = C:/rumix/ruby/lib/ruby/gems/1.8

### Emacs拡張のインストール ###

Emacs拡張は`etc/rsense.el`にあります。次のコードを`.emacs`に追加してください。

    ;; $RSENSE_HOMEはRSenseをインストールしたディレクトリのフルパスに置き換えてください
    (setq rsense-home "$RSENSE_HOME")
    (add-to-list 'load-path (concat rsense-home "/etc"))
    (require 'rsense)

[`auto-complete-mode`](http://cx4a.org/software/auto-complete/)と一緒に利用することも可能です。

### Vimプラグインのインストール ###

Vimプラグインは`etc/vim/plugin/rsense.vim`にあります。`etc/vim`をプラグインディレクトリにコピーしてください。UNIX系システムなら

    $ mkdir -p ~/.vim/plugin
    $ cp etc/vim/plugin/rsense.vim ~/.vim/plugin

で、Windowsなら

    > mkdir "C:\Program Files\Vim\.plugin"
    > copy etc\vim\plugin\rsense.vim "C:\Program Files\Vim\.plugin\"

のようになるでしょう。詳しくは`help 'runtimepath'`を参照してください。

最後に`.vimrc`に次のコードを書いてください。

    ;; $RSENSE_HOMEはRSenseをインストールしたディレクトリに置き換えてください
    let g:rsenseHome = "$RSENSE_HOME"

使い方
------

**Windowsの場合、はじめにサーバーを起動しておく必要があります**。[インストール](#Windows)を参照してください。

### Emacs ###

まず最初に、`M-x rsense-version`で正しく動作していることを確認してください。何も出力がない場合は、おそらく正しく動作していません。[トラブルシューティング](#)を参照してください。

`.`あるいは`::`の直後に`M-x rsense-complete`でメソッド名や定数名を補完できます。

![](rsense-emacs-1.png)

次のようなキーバインドを設定するとよいかもしれません。

    ;; C-c .で補完
    (add-hook 'ruby-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c .") 'rsense-complete)))

`auto-complete-mode`を利用している場合、`M-x ac-complete-rsense`でも補完できます。

![](rsense-emacs-2.png)

次のようなキーバインドを設定するとよいかもしれません。

    ;; C-c .で補完
    (add-hook 'ruby-mode-hook
              (lambda ()
                (local-set-key (kbd "C-c .") 'ac-complete-rsense)))

`.`や`::`を入力した直後に自動的に補完を開始したいなら、`ac-sources`に`ac-source-rsense-method`と`ac-source-rsense-contant`を追加してください。

    (add-hook 'ruby-mode-hook
              (lambda ()
                (add-to-list 'ac-sources 'ac-source-rsense-method)
                (add-to-list 'ac-sources 'ac-source-rsense-constant)))

さらに`M-x rsense-type-help`でポイントしている式の型を見ることができます。

![](rsense-emacs-3.png)

`popup.el`がない場合はミニバッファに表示されます。

他にもプロジェクトやRSenseを操作するコマンドがあります。

`rsense-version`
: RSenseのバージョンを表示します。

`rsense-open-project`
: 指定されたディレクトリでプロジェクトを開きます。

`rsense-close-project`
: 指定された名前のプロジェクトを閉じます。

`rsense-clear`
: 現状の環境をクリアします。

`rsense-exit`
: RSenseを終了します。

### Vim ###

`.`あるいは`::`の直後に`^X ^U`でメソッド名や定数名を補完できます。

![](rsense-vim.png)

自動的に補完するには次のコードを`.vimrc`に書いてVimを再起動してください。

    let g:rsenseUseOmniFunc = 1

`autocomplpop.vim`や関連するプラグインを利用していない場合は、自動的に補完されないので`^X ^O`でオムニ補完を開始してください。

開発者がVimスクリプトに詳しくないので、現在のところVimプラグインは実験的な実装にとどまっています。そのためVimから使えるコマンドはありません。かわりに[コマンドラインインターフェース](#)を使ってください。

### コマンドラインインターフェース ###

RSenseはCLI(command line interface)としてターミナルから使うこともできます。CLIには二つのフロントエンドが存在します。一つは[プリミティブフロントエンド](#)と呼ばれ、コマンドごとにRSenseのプロセスを起動します。もう一つは[ラッパーフロントエンド](#)と呼ばれ、RSenseのプロセスを隠蔽してくれます。つまりラッパーフロントエンドではサーバー/クライアントモデルや初期化時間を気にする必要がないのです。通常はラッパーフロントエンドを利用します。

本節以降のコードはUNIX系システムでのみ有効です。

#### プリミティブフロントエンド ####

プリミティブフロントエンドの主たるコンポーネントは`lib/rsense.jar`です。つまりプリミティブフロントエンドを使うには次のように`java`コマンドで起動しなくてはなりません。

    $ java -cp lib/jruby.jar:lib/antlr-runtime-3.2.jar:lib/rsense.jar org.cx4a.rsense.Main command option...

言うまでもありませんが、クラスパスの設定は必須です。面倒くさいですか？私も面倒xです。とにかくプリミティブフロントエンドで使えるコマンドとオプションを以下に列挙します。

##### `code-completion`コマンド #####

このコマンドは指定されたファイルの指定された場所でコード補完を行います。ファイルは`--file=`オプションで指定し、場所は`--location=`オプションで指定します。`--location=`オプションは次のどれかです。

* ファイルの先頭からのオフセット（ゼロベース）
* "行:カラム"フォーマット（ワンベース）
* マーク

例えば、`--location=123`はファイルの先頭から123にあるコード補完を意味し、`--location=10:8`は10行目の8カラム目でのコード補完を意味し、`--location=_|_`はファイルで始めに`_|_`が見つかる場所でのコード補完を意味します。`--location=`オプションが省略された場合は`--location=_|_`が使われます。

オフセットやカラム番号の単位はバイトではなく文字です。ソースコードが非ASCII文字を含む場合は、`--encoding=`オプションで正しいエンコーディンを与える必要があるでしょう。利用可能なエンコーディングについては[Java Supported Encodings][]を参照してください。

**例:**

クラスパスオプションは省略されています。

    $ cat test1.rb
    1
    $ java -cp ... org.cx4a.rsense.Main code-completion --file=test1.rb --location=1
    completion: succ
    ...
    $ java -cp ... org.cx4a.rsense.Main code-completion --file=test1.rb --location=1:1
    completion: succ
    ...
    $ cat test2.rb
    1_|_
    $ java -cp ... org.cx4a.rsense.Main code-completion --file=test1.rb --location=_|_
    completion: succ
    ...

##### `type-inference`コマンド #####

[`code-completion`コマンド](#)と同じですが、式の型を出力するところが違います。`code-completion`コマンドで利用可能なオプションは、このコマンドでも利用可能です。

**例:**

    $ cat test1.rb
    1
    $ java -cp ... org.cx4a.rsense.Main type-inference --file=test1.rb --location=1
    type: Fixnum
    $ java -cp ... org.cx4a.rsense.Main type-inference --file=test1.rb --location=1:1
    type: Fixnum
    $ cat test2.rb
    1_|_
    $ java -cp ... org.cx4a.rsense.Main type-inference --file=test1.rb --location=_|_
    type: Fixnum

##### `load`コマンド #####

指定されたファイルを読み込みます。

**例:**

    $ java -cp ... org.cx4a.rsense.Main load --file=test1.rb

##### `script`コマンド #####

このコマンドは一連のコマンドを何度も実行するのに便利です。スクリプトファイルが与えられない場合は標準入力からコマンドを読み込みます。各コマンドの終了は`--end-mark=`で指定されたマークで検出されます。`--end-mark=`オプションが省略された場合は、`--end-mark=EOF`が使われます。

このコマンドではいくつかの特別なコマンドが使えます。`exit`あるいは`quit`コマンドはRSenseを直ちに終了します。

**例:**

    $ java -cp ... org.cx4a.rsense.Main script
    > type-inference
    1_|_
    EOF
    type: Fixnum
    > code-completion
    1_|_
    EOF
    completion: succ
    ...
    ^D
    $ cat test.rsense
    type-inference --test=Foo --should-be=Fixnum
    1_|_
    EOF

    type-inference --test=Bar --should-be=String
    'Hello'_|_
    EOF
    $ java -cp ... org.cx4a.rsense.Main script test.rsense
    Foo... [OK]
    Bar... [OK]
    test: count=2, success=2, failure=0

##### `clear`コマンド #####

現在の環境をクリアします。このコマンドは主にスクリプトで利用します。

##### `list-project`コマンド #####

現在開いているプロジェクトを一覧します。`--verbose`オプションが与えられた場合はプロジェクトの詳細も出力します。[プロジェクト](#)も参照してください。

##### `open-project`コマンド #####

指定されたディレクトリのプロジェクトを開きます。[プロジェクト](#)も参照してください。

##### `close-project`コマンド #####

指定された名前のプロジェクトを閉じます。[プロジェクト](#)も参照してください。

##### `environment`コマンド #####

現在のRSenseの環境を出力します。

##### `help`コマンド #####

ヘルプを表示します。

##### `version`バージョン #####

バージョンを表示します。

##### `--home`オプション #####

RSenseのホームディレクトリを指定します。`~/.rsense`がある場合は、指定する必要はないでしょう。

##### `--debug`オプション #####

デバッグ用メッセージを表示するためのオプションです。

##### `--log=`オプション #####

ログを出力するファイルを指定します。

##### `--format=`オプション #####

出力の形式を指定します。`emacs`と`plain`が利用できます。デフォルトは`plain`です。

##### `--encoding=`オプション #####

ファイルのエンコーディングを指定します。エンコーディング文字列は[Java Supported Encodings][]のどれかである必要があります。このオプションが省略された場合は、`--encoding=UTF-8`が使われます。

##### `--load-path=`オプション #####

追加の`load-path`を指定します。

##### `--gem-path=`オプション #####

追加の`gem-path`を指定します。

##### `--config=`オプション #####

指定された設定ファイルを読み込みます。[設定ファイル](#Configuration_File)を参照してください。

##### `--project=`オプション #####

プロジェクトを指定します。RSenseはそのプロジェクトの環境（`load-path`や`gem-path`）でコマンドを処理します。[プロジェクト](#)も参照してください。

##### `--detect-project=`オプション #####

RSenseは`--file`オプションあるいはこのオプションで指定されたファイルからプロジェクトを検出して、コマンドの処理に利用します。[プロジェクト](#)も参照してください。

#### ラッパーフロントエンド ####

`bin/rsense`はサーバー/クライアントモデルの複雑さを隠蔽するためのラッパーフロントエンドです。初期化時間なしで`rsense.jar`と同じように使えます。`bin/rsense`は自動的にプリミティブフロントエンドをバックグラウンドデーモン（サーバー）として起動し、そのデーモンと通信しながら処理を行います[^1]。

[^1]: Windowsの場合はあらかじめサーバーを起動しておく必要があります

利用可能なコマンドはプリミティブフロントエンドと大体同じです。

**例:**

    $ bin/rsense version
    RSense 0.0.1
    $ cat test1.rb
    def f() 1 end
    $ bin/rsense type-inference --file=test1.rb # define f()
    $ cat test2.rb
    f_|_
    $ bin/rsense type-inference --file=test2.rb # use f()
    type: Fixnum

設定ファイル
------------

CLIフロントエンドに設定ファイルを指定することができます。設定ファイルは一連のオプションを列挙したものです。例えば

    $ bin/rsense type-inference --debug --log=/tmp/rsense.log --format=emacs --encoding=UTF-8 --load-path=lib --file=a.rb --location=1

は、次と同等です。

    $ cat config
    debug
    log = /tmp/rsense.log
    format = emacs
    encoding = UTF-8
    load-path = lib
    $ bin/rsense --config=config --file=a.rb --location=1

[ラッパーフロントエンド](#)は`~/.rsense`を特別に読み込みます。このファイルは[インストール](#)時に作成したものです。

プロジェクト
------------

RSenseは正しい`load-path`を取得するためにプロジェクト管理を行います。各プロジェクトは次のような`.rsense`という設定ファイルをプロジェクトのルートディレクトリに持っておくべきです。

    name = MyProject
    load-path = lib

`--project`オプションが与えられた場合（上のケースなら`--project=MyProject`）、RSenseは設定ファイルに記述された`load-path`を使ってそのコマンドを処理します。`--detect-project`オプションが与えられた場合は、`.rsense`ファイルを探して自動的にプロジェクトを検出します。

RSenseは`load-path`とプロジェクト名の以上のことに関してはなにもケアしません。とてもシンプルです。

Rubyリファレンスマニュアル
--------------------------

この節ではRubyリファレンスマニュアル（略してrefm）をRSenseから使う方法を説明します。

まず<http://www.ruby-lang.org/ja/man/archive/>から最新のスナップショットをダウンロードしてください。次にアーカイブを展開して、例えば`~/src/rurema`にコピーしてください。

    $ cd ~/tmp
    $ wget http://www.ruby-lang.org/ja/man/archive/snapshot/ruby-refm-1.9.1-dynamic-snapshot.tar.bz2
    $ tar xjf ruby-refm-1.9.1-dynamic-snapshot.tar.bz2
    $ mv ruby-refm-1.9.1-dynamic-snapshot ~/src/rurema

最後に次のコードを`.emacs`に書いてください。

    (setq rsense-rurema-home "~/src/rurema")

補完ヘルプは自動的に表示されます。現在のところ補完ヘルプはEmacsでのみ対応しています。

制限事項
--------

現在のところ以下が未対応となっています。

* `eval`
* `proc`と`lambda`
* `callcc`
* `raise`と`rescue`のフロー解析
* `Struct`
* 多くの標準ライブラリ（[ステータス](devel.txt#Standard_Library_Status)）
* 大きいプロジェクト
* 構文エラー時の補完

トラブルシューティング
----------------------

チェックリスト:

* Rubyインタプリタが実行可能か
* Javaプログラムが実行可能か
* プリミティブフロントエンドが正しく動作するか

  UNIX系システム:
  ~~~~
  $ java -cp lib/jruby.jar:lib/antlr-runtime-3.2.jar:lib/rsense.jar org.cx4a.rsense.Main version
  RSense 0.1
  ~~~~
  
  Windows:
  ~~~~
  > java -cp lib\jruby.jar:lib\antlr-runtime-3.2.jar:lib\rsense.jar org.cx4a.rsense.Main version
  RSense 0.1
  ~~~~

* ラッパーフロントエンドが正しく動作するか

  UNIX系システム:
  ~~~~
  $ bin/ruby server
  ...
  ^C
  $ bin/ruby version
  RSense 0.1
  ~~~~
  
  Windows:
  ~~~~
  > ruby bin\ruby version
  > ruby bin\ruby server
  ...
  ^C
  RSense 0.1
  ~~~~

* EmacsやVimの設定は正しいか

チェックリストに問題がない場合は、RSenseの`java`と`ruby`のプロセスをキルし、pidファイルを削除したのち、最後試してください。pidファイルはUNIX系システムの場合は`$RSENSE_HOME/rsense-pid`あるいは`/tmp/rsense-pid`、Windowsの場合は`%RSENSE_HOME%\rsense-pid`にあります。

それでも問題が解決できない場合は開発者に連絡してください。

[Ruby]: http://www.ruby-lang.org/ "Ruby Programming Language"
[UNIX philosophy]: http://en.wikipedia.org/wiki/Unix_philosophy
[Java Supported Encodings]: http://java.sun.com/j2se/1.5.0/docs/guide/intl/encoding.doc.html
